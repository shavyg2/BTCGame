// Generated by CoffeeScript 1.7.1
(function() {
  var ButtonEvent, Character, DisplayObject, Enemy, Player, PlayerController, World, base, canvas, e, i, p, world, _i, _j, _k, _l, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ButtonEvent = (function() {
    function ButtonEvent(player, keyCode) {
      this.player = player;
      this.keyCode = keyCode;
      this.init();
    }

    ButtonEvent.prototype.init = function() {
      window.addEventListener("blur", (function(_this) {
        return function() {
          window.clearInterval(_this.player.control.interval[_this.keyCode]);
          window.clearInterval(_this.player.control.interval["" + _this.keyCode + " tap"]);
          _this.player.control.keypress["" + _this.keyCode + " tap"] = "none";
          return _this.player.control.keypress[_this.keyCode] = "none";
        };
      })(this), false);
      window.addEventListener("focus", (function(_this) {
        return function() {
          window.clearInterval(_this.player.control.interval[_this.keyCode]);
          return window.clearInterval(_this.player.control.interval["" + _this.keyCode + " tap"]);
        };
      })(this), false);
      document.addEventListener("keydown", (function(_this) {
        return function(event) {
          if (event.keyCode === _this.keyCode && _this.player.control.keypress[_this.keyCode] !== "down") {
            _this.player.control.keypress[_this.keyCode] = "down";
            return _this.player.control.interval[_this.keyCode] = window.setInterval(_this.down, 1000 / 60);
          }
        };
      })(this), false);
      document.addEventListener("keyup", (function(_this) {
        return function(event) {
          if (event.keyCode === _this.keyCode) {
            _this.player.control.keypress[_this.keyCode] = "none";
            window.clearInterval(_this.player.control.interval[_this.keyCode]);
            return _this.up();
          }
        };
      })(this), false);
      return document.addEventListener("keypress", (function(_this) {
        return function(event) {
          var code;
          event.keyCode = event.which;
          code = Math.max(event.keyCode, event.which);
          if (code === _this.keyCode && _this.player.control.keypress["" + _this.keyCode + " tap"] !== "down") {
            return _this.player.control.interval["" + _this.keyCode + " tap"] = window.setInterval(function() {
              _this.player.control.keypress["" + _this.keyCode + " tap"] = "down";
              return _this.keypress.call(_this, _this.player.control.interval["" + _this.keyCode + " tap"]);
            }, 1000 / 60);
          }
        };
      })(this));
    };

    ButtonEvent.prototype.down = function() {};

    ButtonEvent.prototype.up = function() {};

    ButtonEvent.prototype.keypress = function(key) {};

    ButtonEvent.prototype.clear = function() {
      return this.player.control.keypress["" + this.keyCode + " tap"] = "none";
    };

    return ButtonEvent;

  })();

  DisplayObject = (function() {
    function DisplayObject(x, y, width, height) {
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
      this.image = null;
    }

    DisplayObject.prototype.setWorld = function(world) {
      this.world = world;
    };

    DisplayObject.prototype.setImage = function(url) {
      this.url = url;
      return this.image = this.world.p.requestImage(this.url);
    };

    DisplayObject.prototype.draw = function() {};

    DisplayObject.prototype.enterFrame = function() {};

    return DisplayObject;

  })();

  Character = (function(_super) {
    __extends(Character, _super);

    function Character(x, y, width, height) {
      Character.__super__.constructor.call(this, x, y, width, height);
      this.base = y;
      this.frame = [];
      this._framePosition = 1;
    }

    Character.prototype.setFrame = function(w, h) {
      return this.frameSize = {
        "w": w,
        "h": h
      };
    };

    Character.prototype.setFramePosition = function(position, yPosition, count, speed) {
      this._framePosition = position;
      this._yPosition = yPosition;
      this._frameCount = count;
      return this._speed = speed;
    };

    Character.prototype.framePosition = function() {
      return Math.floor(this._framePosition) % this._frameCount;
    };

    Character.prototype.getFrameOverShoot = function() {
      var x;
      x = this.frameSize.w * this.framePosition();
      return x;
    };

    Character.prototype.getFrameX = function() {
      return this.frameSize.w * this.framePosition();
    };

    Character.prototype.getFrameWidth = function() {
      return this.getFrameX() + this.frameSize.w;
    };

    Character.prototype.getFrameY = function() {
      return this._yPosition * this.frameSize.h;
    };

    Character.prototype.getFrameHeight = function() {
      return this.frameSize.h;
    };

    Character.prototype.X = function() {
      return this.x;
    };

    Character.prototype.Y = function() {
      return this.y;
    };

    Character.prototype.getFrame = function(x, y) {
      if (typeof this.frame[x] === "undefined" || this.frame[x] === null) {
        this.frame[x] = [];
      }
      if (typeof this.frame[x][y] === "undefined" || this.frame[x][y] === null) {
        this.frame[x][y] = this.world.p.createImage(this.width, this.height);
        this.frame[x][y].copy(this.image, this.getFrameX(), this.getFrameY(), this.frameSize.w, this.frameSize.h, 0, 0, this.width, this.height);
      }
      return this.frame[x][y];
    };

    Character.prototype.draw = function() {
      if (this.image !== null) {
        if (this.image.width !== 0) {
          if (typeof this.frameSize !== "undefined") {
            return this.world.p.image(this.getFrame(this._framePosition, this._yPosition), this.X(), this.Y());
          } else {
            return this.world.p.image(this.image, this.x, this.y);
          }
        }
      }
    };

    return Character;

  })(DisplayObject);

  PlayerController = (function() {
    function PlayerController(player) {
      this.init.call(player);
      this.keypress = [];
      this.interval = [];
    }

    PlayerController.prototype.init = function() {
      this.right = new ButtonEvent(this, 39);
      this.right.down = (function(_this) {
        return function() {
          _this.velocity = Math.round(World.timeLapse() * 0.5);
          _this.x += _this.velocity;
          _this.flip = false;
          if (_this.base === _this.y) {
            _this._framePosition += _this._speed * World.timeLapse();
          }
          if (_this._yPosition === 1 && _this.base === _this.y) {
            _this.setFramePosition(0, 0, 7, 0.015);
          }
          return _this.x = Math.min(100, _this.x);
        };
      })(this);
      this.right.up = (function(_this) {
        return function() {
          _this.setFramePosition(0, 1, 5, 0.000);
          return _this.velocity = 0;
        };
      })(this);
      this.left = new ButtonEvent(this, 37);
      this.left.down = (function(_this) {
        return function() {
          _this.flip = true;
          _this.velocity = -Math.round(World.timeLapse() * 0.5);
          _this.x += _this.velocity;
          return _this.x = Math.max(1, _this.x);
        };
      })(this);
      this.left.up = (function(_this) {
        return function() {
          _this.setFramePosition(0, 1, 5, 0.000);
          return _this.velocity = 0;
        };
      })(this);
      this.jump = new ButtonEvent(this, 32);
      return this.jump.keypress = (function(_this) {
        return function(key) {
          if (_this.y === _this.base) {
            _this.setFramePosition(1, 1, 5, 0.007);
          } else {
            _this._framePosition += _this._speed * World.timeLapse();
          }
          _this.gravity += _this.base_gravity * World.timeLapse();
          _this.y += _this.yV;
          _this.y += _this.gravity;
          _this.y = Math.round(_this.y);
          if (_this.y > _this.baseY) {
            window.clearInterval(key);
            eval('this').clear();
            _this.y = _this.baseY;
            _this.gravity = 0;
            return p.setFramePosition(1, 0, 7, 0.015);
          }
        };
      })(this);
    };

    return PlayerController;

  })();

  Enemy = (function(_super) {
    __extends(Enemy, _super);

    function Enemy(x, y, w, h) {
      Enemy.__super__.constructor.call(this, x, y, w, h);
    }

    return Enemy;

  })(Character);

  Player = (function(_super) {
    __extends(Player, _super);

    function Player(x, y, w, h) {
      Player.__super__.constructor.call(this, x, y, w, h);
      this.control = new PlayerController(this);
      this.yV = -40;
      this.baseY = y;
      this.base_gravity = 0.1;
      this.gravity = 0;
      this.flip = false;
      this.velocity = 0;
    }

    return Player;

  })(Enemy);

  World = (function() {
    function World(canvas, width, height) {
      if (width == null) {
        width = 600;
      }
      if (height == null) {
        height = 400;
      }
      console.log("created the world");
      this.framerateContainer = document.getElementById("framerate");
      this.child = [];
      this.p = new Processing(canvas);
      console.log("created the canvas");
      this.p.size(width, height);
      console.log("created the background");
      this.init();
      console.log("created the game loop");
    }

    World.timeLapse = function() {
      var f;
      f = World.enterFrame;
      return f[f.length - 1] - f[f.length - 2] || 0;
    };

    World.enterFrame = [];

    World.prototype.addPlayer = function(player) {
      this.player = player;
    };

    World.prototype.addChild = function(dp) {
      return this.child.push(dp);
    };

    World.prototype.init = function() {
      World.enterFrame.push(Date.now());
      if (World.enterFrame.length > 20) {
        World.enterFrame.shift();
        this.loop();
      }
      return window.requestAnimationFrame((function(_this) {
        return function() {
          return _this.init();
        };
      })(this));
    };

    World.prototype.loop = function() {
      var c, _i, _len, _ref;
      this.p.background(135, 206, 250);
      _ref = this.child;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        c.enterFrame();
        c.draw(this.p);
      }
      return this.player.draw(this.p);
    };

    return World;

  })();

  canvas = document.getElementById("canvas");

  world = new World(canvas, document.body.clientWidth, document.body.clientHeight);

  window.addEventListener("resize", function() {
    return world.p.size(document.body.clientWidth, document.body.clientHeight);
  }, false);

  base = document.body.clientHeight - 150;


  /*
    The Grass
   */

  for (i = _i = 0, _ref = Math.ceil(document.body.clientWidth / 50); 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
    e = new Character(i * 200, base + 80, 300, 300);
    e.setWorld(world);
    e.speed = 0;
    e.setFrame(150, 150);
    e.setFramePosition(0, 0, 5, 0);
    e.enterFrame = function() {
      if (this.x <= -1000) {
        this.x = document.body.clientWidth + 500;
      }
      return this.x -= this.world.player.velocity || 0;
    };
    e.setImage("../resources/grass.png");
    world.addChild(e);
  }


  /*
    The Clouds
   */

  for (i = _j = 0; _j <= 5; i = ++_j) {
    e = new Character(Math.random() * document.body.clientWidth, -350 + (document.body.clientHeight / 2) * Math.random(), 500, 500);
    e.setWorld(world);
    e.speed = Math.pow(Math.random(), 3);
    e.setFrame(270, 270);
    e.setFramePosition(Math.round(Math.random() * 4), 0, 4, 0);
    e.enterFrame = function() {
      if (this.x <= -500) {
        this.x = document.body.clientWidth + Math.random() * 400;
      }
      return this.x -= this.speed + (this.world.player.velocity || 0);
    };
    e.setImage("../resources/clouds.png");
    world.addChild(e);
  }


  /*
    The House
   */

  for (i = _k = 0; _k <= 10; i = ++_k) {
    e = new Character(i * Math.random() * 500 * i, base - 160, 350, 249);
    e.setWorld(world);
    e.speed = 0;
    e.setFrame(350, 249);
    e.setFramePosition(0, 0, 5, 0);
    e.enterFrame = function() {
      if (this.x <= -5000) {
        this.x = document.body.clientWidth + Math.random() * 900;
      }
      return this.x -= this.world.player.velocity || 0;
    };
    e.setImage("../resources/house.png");
    world.addChild(e);
  }

  for (i = _l = 0; _l <= 2; i = ++_l) {
    e = new Enemy(Math.random() * 5000 + 400, base + 40, 100, 100);
    e.setWorld(world);
    e.speed = 2;
    e.setFrame(45, 45);
    e.setFramePosition(0, 0, 5, 0);
    e.enterFrame = function() {
      if (this.x < -200) {
        this.speed = Math.random() * 5;
        this.x = document.body.clientWidth + 500;
      }
      return this.x -= this.speed + (this.world.player.velocity || 0);
    };
    e.setImage("../resources/monster-sprite.png");
    world.addChild(e);
  }

  p = new Player(10, base, 90, 135);

  p.setWorld(world);

  p.setFrame(90, 135);

  p.setFramePosition(0, 1, 7, 0.000);

  world.addPlayer(p);

  p.setImage("../resources/07gh_sim_tillerman_zpsa2af4431.png");

}).call(this);
