// Generated by CoffeeScript 1.7.1
(function() {
  var ButtonEvent, Character, DisplayObject, Enemy, Player, PlayerController, World, canvas, p, world,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ButtonEvent = (function() {
    function ButtonEvent(player, keyCode) {
      this.player = player;
      this.keyCode = keyCode;
      this.init();
    }

    ButtonEvent.prototype.init = function() {
      window.addEventListener("blur", (function(_this) {
        return function() {
          window.clearInterval(_this.player.control.interval[_this.keyCode]);
          window.clearInterval(_this.player.control.interval["" + _this.keyCode + " tap"]);
          _this.player.control.keypress["" + _this.keyCode + " tap"] = "none";
          return _this.player.control.keypress[_this.keyCode] = "none";
        };
      })(this), false);
      window.addEventListener("focus", (function(_this) {
        return function() {
          window.clearInterval(_this.player.control.interval[_this.keyCode]);
          return window.clearInterval(_this.player.control.interval["" + _this.keyCode + " tap"]);
        };
      })(this), false);
      document.addEventListener("keydown", (function(_this) {
        return function(event) {
          if (event.keyCode === _this.keyCode && _this.player.control.keypress[_this.keyCode] !== "down") {
            _this.player.control.keypress[_this.keyCode] = "down";
            return _this.player.control.interval[_this.keyCode] = window.setInterval(_this.down, 1000 / 60);
          }
        };
      })(this), false);
      document.addEventListener("keyup", (function(_this) {
        return function(event) {
          if (event.keyCode === _this.keyCode) {
            _this.player.control.keypress[_this.keyCode] = "none";
            window.clearInterval(_this.player.control.interval[_this.keyCode]);
            return _this.up();
          }
        };
      })(this), false);
      return document.addEventListener("keypress", (function(_this) {
        return function(event) {
          var code;
          event.keyCode = event.which;
          code = Math.max(event.keyCode, event.which);
          if (code === _this.keyCode && _this.player.control.keypress["" + _this.keyCode + " tap"] !== "down") {
            return _this.player.control.interval["" + _this.keyCode + " tap"] = window.setInterval(function() {
              _this.player.control.keypress["" + _this.keyCode + " tap"] = "down";
              return _this.keypress.call(_this, _this.player.control.interval["" + _this.keyCode + " tap"]);
            }, 1000 / 60);
          }
        };
      })(this));
    };

    ButtonEvent.prototype.down = function() {};

    ButtonEvent.prototype.up = function() {};

    ButtonEvent.prototype.keypress = function(key) {};

    ButtonEvent.prototype.clear = function() {
      return this.player.control.keypress["" + this.keyCode + " tap"] = "none";
    };

    return ButtonEvent;

  })();

  DisplayObject = (function() {
    function DisplayObject(x, y, width, height) {
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
      this.image = null;
    }

    DisplayObject.prototype.setWorld = function(world) {
      this.world = world;
    };

    DisplayObject.prototype.setImage = function(url) {
      this.url = url;
      console.log(this.world);
      return this.image = this.world.p.requestImage(this.url);
    };

    DisplayObject.prototype.draw = function() {};

    return DisplayObject;

  })();

  Character = (function(_super) {
    __extends(Character, _super);

    function Character(x, y, width, height) {
      Character.__super__.constructor.call(this, x, y, width, height);
      this.frame = null;
      this.framePosition = 1;
    }

    Character.prototype.setFrame = function(w, h) {
      return this.frameSize = {
        "w": w,
        "h": h
      };
    };

    Character.prototype.setFramePosition = function(position) {
      return this.framePosition = position;
    };

    Character.prototype.getFrameOverShoot = function() {
      var x;
      x = this.frameSize.w * this.framePosition;
      return x;
    };

    Character.prototype.getFrameX = function() {
      var x;
      x = this.getFrameOverShoot();
      if (x > this.image.width) {
        x %= this.image.width;
      }
      return x;
    };

    Character.prototype.getFrameY = function() {
      var x;
      x = parseInt(this.getFrameOverShoot() / this.image.width);
      return x += this.frameSize.h;
    };

    Character.prototype.draw = function() {
      if (this.image !== null) {
        if (this.image.width !== 0) {
          if (typeof this.frameSize !== "undefined") {
            document.getElementById("info").innerHTML = "" + this.x + "," + this.y + ", " + (this.getFrameX()) + "," + (this.getFrameY());
            return this.frame = this.world.p.copy(this.image, 0, 0, this.getFrameX(), this.getFrameY(), this.x, this.y, this.getFrameX(), this.getFrameY());
          } else {
            return this.world.p.image(this.image, this.x, this.y);
          }
        }
      }
    };

    return Character;

  })(DisplayObject);

  PlayerController = (function() {
    function PlayerController(player) {
      this.init.call(player);
      this.keypress = [];
      this.interval = [];
    }

    PlayerController.prototype.init = function() {
      this.right = new ButtonEvent(this, 39);
      this.right.down = (function(_this) {
        return function() {
          return _this.x += 5;
        };
      })(this);
      this.left = new ButtonEvent(this, 37);
      this.left.down = (function(_this) {
        return function() {
          return _this.x -= 5;
        };
      })(this);
      this.jump = new ButtonEvent(this, 32);
      return this.jump.keypress = (function(_this) {
        return function(key) {
          _this.gravity += _this.base_gravity;
          _this.y += _this.yV;
          _this.y += _this.gravity;
          _this.y = Math.round(_this.y);
          if (_this.y > _this.baseY) {
            window.clearInterval(key);
            eval('this').clear();
            _this.y = _this.baseY;
            return _this.gravity = 0;
          }
        };
      })(this);
    };

    return PlayerController;

  })();

  Enemy = (function(_super) {
    __extends(Enemy, _super);

    function Enemy(x, y, w, h) {
      Enemy.__super__.constructor.call(this, x, y, w, h);
    }

    return Enemy;

  })(Character);

  Player = (function(_super) {
    __extends(Player, _super);

    function Player(x, y, w, h) {
      Player.__super__.constructor.call(this, x, y, w, h);
      this.control = new PlayerController(this);
      this.yV = -10;
      this.baseY = y;
      this.base_gravity = 0.5;
      this.gravity = 0;
    }

    return Player;

  })(Enemy);

  World = (function() {
    function World(canvas) {
      console.log("created the world");
      this.child = [];
      this.p = new Processing(canvas);
      console.log("created the canvas");
      this.p.size(600, 300);
      this.p.background(100);
      console.log("created the background");
      this.init();
      console.log("created the game loop");
    }

    World.prototype.addChild = function(dp) {
      return this.child.push(dp);
    };

    World.prototype.init = function() {
      this.loop();
      return window.requestAnimationFrame((function(_this) {
        return function() {
          return _this.init();
        };
      })(this));
    };

    World.prototype.loop = function() {
      var c, _i, _len, _ref, _results;
      this.p.background(255);
      _ref = this.child;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        _results.push(c.draw(this.p));
      }
      return _results;
    };

    return World;

  })();

  canvas = document.getElementById("canvas");

  world = new World(canvas);

  p = new Player(10, 50, 200, 200);

  p.setWorld(world);

  p.setFrame(70.2, 120);

  p.setFramePosition(3);

  world.addChild(p);

  p.setImage("../resources/07gh_sim_tillerman_zpsa2af4431.jpg");

}).call(this);
